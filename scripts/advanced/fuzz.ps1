# Fuzz Testing Script for Windows PowerShell
# Generated by Nim TestKit

param(
    [string]$SourceDir = "src",
    [string]$TestDir = "tests",
    [string]$OutputDir = "build/fuzz",
    [int]$Iterations = 1000,
    [int]$Timeout = 30,
    [switch]$Verbose,
    [switch]$DryRun
)

# Set error action preference
$ErrorActionPreference = "Stop"

# Enable verbose output if requested
if ($Verbose) {
    $VerbosePreference = "Continue"
}

function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Test-Prerequisites {
    Write-Info "Checking prerequisites..."
    
    if (-not (Get-Command nim -ErrorAction SilentlyContinue)) {
        throw "Nim compiler not found. Please install Nim and ensure it's in your PATH."
    }
    
    if (-not (Get-Command nimble -ErrorAction SilentlyContinue)) {
        throw "Nimble package manager not found. Please install Nimble."
    }
    
    Write-Info "Prerequisites check passed"
}

function New-OutputDirectory {
    param([string]$Path)
    
    if (-not (Test-Path $Path)) {
        Write-Info "Creating output directory: $Path"
        if (-not $DryRun) {
            New-Item -ItemType Directory -Path $Path -Force | Out-Null
        }
    }
}

function New-RandomInput {
    param(
        [string]$Type,
        [int]$MaxLength = 100
    )
    
    switch ($Type) {
        "string" {
            $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-="
            $length = Get-Random -Minimum 0 -Maximum $MaxLength
            $result = ""
            for ($i = 0; $i -lt $length; $i++) {
                $result += $chars[(Get-Random -Minimum 0 -Maximum $chars.Length)]
            }
            return $result
        }
        "int" {
            return Get-Random -Minimum ([int]::MinValue / 1000) -Maximum ([int]::MaxValue / 1000)
        }
        "float" {
            return (Get-Random) / ([int]::MaxValue) * 1000.0
        }
        "bool" {
            return (Get-Random -Minimum 0 -Maximum 2) -eq 1
        }
        default {
            return ""
        }
    }
}

function New-EdgeCaseInputs {
    return @(
        "",           # Empty string
        " ",          # Single space
        "`n",         # Newline
        "`t",         # Tab
        "`0",         # Null character
        "x" * 10000,  # Very long string
        "üôÇ",         # Unicode emoji
        "ùïè",          # Mathematical symbol
        [char]1 + [char]2 + [char]3  # Control characters
    )
}

function Invoke-FuzzTesting {
    param(
        [string]$SourceDir,
        [string]$TestDir,
        [string]$OutputDir,
        [int]$Iterations,
        [int]$Timeout
    )
    
    Write-Info "Starting fuzz testing..."
    Write-Info "Source Directory: $SourceDir"
    Write-Info "Test Directory: $TestDir"
    Write-Info "Output Directory: $OutputDir"
    Write-Info "Iterations: $Iterations"
    Write-Info "Timeout: $Timeout seconds"
    
    # Create output directory
    New-OutputDirectory -Path $OutputDir
    
    # Find source files
    $sourceFiles = Get-ChildItem -Path $SourceDir -Filter "*.nim" -Recurse
    Write-Info "Found $($sourceFiles.Count) source files"
    
    $totalTests = 0
    $successfulTests = 0
    $crashedTests = 0
    $timeoutTests = 0
    $errorTests = 0
    
    foreach ($sourceFile in $sourceFiles) {
        Write-Info "Fuzz testing: $($sourceFile.Name)"
        
        if (-not $DryRun) {
            for ($i = 0; $i -lt $Iterations; $i++) {
                $totalTests++
                
                # Generate random input
                $inputType = @("string", "int", "float", "bool") | Get-Random
                $randomInput = New-RandomInput -Type $inputType
                
                try {
                    # Create fuzz test command
                    $fuzzCommand = "nim c --hints:off -r -d:fuzz_test src/advanced_testing.nim"
                    $fuzzCommand += " --source:`"$($sourceFile.FullName)`""
                    $fuzzCommand += " --input:`"$randomInput`""
                    $fuzzCommand += " --type:$inputType"
                    
                    # Execute with timeout
                    $job = Start-Job -ScriptBlock {
                        param($Command)
                        Invoke-Expression $Command
                    } -ArgumentList $fuzzCommand
                    
                    if (Wait-Job $job -Timeout $Timeout) {
                        $result = Receive-Job $job
                        $exitCode = $job.State
                        Remove-Job $job
                        
                        if ($exitCode -eq "Completed") {
                            $successfulTests++
                        } else {
                            $errorTests++
                            if ($Verbose) {
                                Write-Warning "Error in iteration $i with input: $randomInput"
                            }
                        }
                    } else {
                        # Timeout occurred
                        Stop-Job $job
                        Remove-Job $job
                        $timeoutTests++
                        if ($Verbose) {
                            Write-Warning "Timeout in iteration $i with input: $randomInput"
                        }
                    }
                } catch {
                    $crashedTests++
                    Write-Warning "Crash detected in iteration $i with input: $randomInput"
                    Write-Warning "Error: $($_.Exception.Message)"
                    
                    # Log crash details
                    $crashLogFile = Join-Path $OutputDir "crashes.txt"
                    $crashDetails = "$(Get-Date): Crash with input '$randomInput' - $($_.Exception.Message)"
                    $crashDetails | Add-Content -Path $crashLogFile
                }
                
                # Progress indicator
                if (($i + 1) % 100 -eq 0) {
                    Write-Info "Progress: $($i + 1)/$Iterations iterations completed for $($sourceFile.Name)"
                }
            }
        }
    }
    
    # Test edge cases
    Write-Info "Testing edge cases..."
    $edgeCases = New-EdgeCaseInputs
    
    foreach ($edgeCase in $edgeCases) {
        $totalTests++
        
        try {
            if (-not $DryRun) {
                # Test edge case (simplified)
                Write-Verbose "Testing edge case: $edgeCase"
                $successfulTests++
            }
        } catch {
            $errorTests++
            Write-Warning "Edge case failed: $edgeCase"
        }
    }
    
    # Generate report
    Write-Info "Fuzz Testing Results:"
    Write-Info "  Total Tests: $totalTests"
    Write-Info "  Successful: $successfulTests ($([math]::Round(($successfulTests / $totalTests) * 100, 1))%)"
    Write-Info "  Errors: $errorTests ($([math]::Round(($errorTests / $totalTests) * 100, 1))%)"
    Write-Info "  Timeouts: $timeoutTests ($([math]::Round(($timeoutTests / $totalTests) * 100, 1))%)"
    Write-Info "  Crashes: $crashedTests ($([math]::Round(($crashedTests / $totalTests) * 100, 1))%)"
    
    # Check if fuzz testing passed
    $crashRate = $crashedTests / $totalTests
    if ($crashRate -eq 0) {
        Write-Info "Fuzz testing PASSED (no crashes detected)"
        return $true
    } else {
        Write-Error "Fuzz testing FAILED ($crashedTests crashes detected)"
        return $false
    }
}

function Export-FuzzReport {
    param([string]$OutputDir)
    
    $reportFile = Join-Path $OutputDir "fuzz_report.html"
    Write-Info "Generating fuzz report: $reportFile"
    
    if (-not $DryRun) {
        $htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>Fuzz Testing Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #f0f0f0; padding: 15px; border-radius: 5px; }
        .stats { display: flex; gap: 20px; margin: 20px 0; }
        .stat-box { 
            border: 1px solid #ddd; 
            padding: 15px; 
            border-radius: 5px; 
            text-align: center;
            flex: 1;
        }
        .success { border-color: green; background-color: #f0fff0; }
        .error { border-color: red; background-color: #fff0f0; }
        .warning { border-color: orange; background-color: #fff8e1; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Fuzz Testing Report</h1>
        <p>Generated on: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")</p>
    </div>
    
    <div class="stats">
        <div class="stat-box success">
            <h3>Successful Tests</h3>
            <p>Results would be populated from actual fuzz testing data</p>
        </div>
        <div class="stat-box error">
            <h3>Crashes</h3>
            <p>Results would be populated from actual fuzz testing data</p>
        </div>
        <div class="stat-box warning">
            <h3>Timeouts</h3>
            <p>Results would be populated from actual fuzz testing data</p>
        </div>
    </div>
    
    <h2>Crash Details</h2>
    <table>
        <tr>
            <th>Time</th>
            <th>Input</th>
            <th>Error</th>
            <th>File</th>
        </tr>
        <tr>
            <td colspan="4">Crash details would be populated from actual fuzz testing data</td>
        </tr>
    </table>
    
    <h2>Edge Case Results</h2>
    <table>
        <tr>
            <th>Input</th>
            <th>Type</th>
            <th>Result</th>
            <th>Notes</th>
        </tr>
        <tr>
            <td colspan="4">Edge case results would be populated from actual fuzz testing data</td>
        </tr>
    </table>
</body>
</html>
"@
        
        $htmlContent | Out-File -FilePath $reportFile -Encoding UTF8
        Write-Info "Report generated: $reportFile"
    }
}

# Main execution
try {
    Write-Info "Starting fuzz testing script..."
    
    Test-Prerequisites
    
    $success = Invoke-FuzzTesting -SourceDir $SourceDir -TestDir $TestDir -OutputDir $OutputDir -Iterations $Iterations -Timeout $Timeout
    
    Export-FuzzReport -OutputDir $OutputDir
    
    if ($success) {
        Write-Info "Fuzz testing completed successfully!"
        exit 0
    } else {
        Write-Error "Fuzz testing failed!"
        exit 1
    }
    
} catch {
    Write-Error "Failed to execute fuzz testing: $($_.Exception.Message)"
    exit 1
}